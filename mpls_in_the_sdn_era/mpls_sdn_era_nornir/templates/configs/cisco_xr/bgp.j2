{% if host.DATA_INPUT.get('bgp') %}
!
router bgp {{ host.DATA_INPUT.bgp.get('asn') }}
bgp router-id {{ host.DATA_INPUT.bgp.get('router_id') }}
address-family ipv4 unicast
address-family vpnv4 unicast
{% if host.DATA_INPUT.bgp.get('add_paths') %}
additional-paths receive
additional-paths send
{% endif %}
!
{% if host.DATA_INPUT.bgp.get('route_reflector') %}
neighbor-group CLIENTS
 remote-as 65000
 cluster-id {{ host.DATA_INPUT.bgp.get('cluster_id') }}
 update-source Loopback0
 address-family ipv4 unicast
  route-reflector-client
 address-family vpnv4 unicast 

{% else %}
neighbor-group RR
 remote-as {{ host.DATA_INPUT.bgp.get('asn') }}
 update-source Loopback0
 address-family ipv4 unicast
 route-policy PL-iBGP-RR-OUT out
 soft-reconfiguration inbound always
 address-family vpnv4 unicast 
!
{% for rr in host.DATA_INPUT.bgp.get('route_reflectors') %}
neighbor {{ rr }}
use neighbor-group RR
!
{% endfor %}
{% endif %}
!
{% if host.DATA_INPUT.bgp.get('neighbors') %}
{% for nx in host.DATA_INPUT.bgp.get('neighbors') %}
{% if nx.get('group') %}
neighbor {{ nx.get('neighbor') }}
 use neighbor-group {{ nx.get('group') }}
{% else %}
neighbor {{ nx.get('neighbor') }}
 remote-as {{ nx.get('remote_as') }}
 update-source {{ nx.get('update_source') }}
 address-family {{ nx.get('afi') }}
 soft-reconfiguration inbound always
{% if nx.get('route_policy') %}
{% for policy in nx.get('route_policy') %}
 route-policy {{ policy }}
{% endfor %}
{% endif%}
{% endif %}
!
{% endfor %}
{% endif %}

{% if host.DATA_INPUT.bgp.get('vrf_neighbors') %}
{% for vrf in host.DATA_INPUT.bgp.get( 'vrf_neighbors') %}
vrf {{ vrf.get('vrf') }}
 bgp router-id {{ vrf.get('router_id') }}
 rd {{ host.DATA_INPUT.bgp.get('router_id') }}:{{ vrf.get('RD') }}
 address-family ipv4 unicast
 !
{% for nx in vrf.get('neighbors') %}
 neighbor {{ nx.get('neighbor') }}
  remote-as {{ nx.get('remote_as') }}
  update-source {{ nx.get('update_source') }}
  address-family ipv4 unicast
{% for policy in nx.get('route_policy') %}
   route-policy {{ policy }}
{% endfor %}
{% if nx.get('as_override') %}
   as-override
  !
{% endif %}
{% endfor %}
{% endfor %}
{% endif %}
!
{% endif %}
